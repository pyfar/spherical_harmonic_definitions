---
title: "Definitions of the Associated Legendre Functions and Spherical Harmonics"
author:
    - Marco Berzborn
    - Fabian Brinkmann
number-sections: true
format:
    html:
        code-fold: true
        code-copy: true
        code-summary: "Show Code"
        code-tools: true
        code-tools-position: top
        code-tools-show: [edit, download]
    pdf:
        pdf-engine: latexmk
        code-line-numbers: true
        execute:
            echo: false
bibliography: refs.bib
jupyter: python3
editor:
    render-on-save: false
execute:
  cache: true
  echo: true

---

# Symbols

| Symbol | Explanation |
|--------|-------------|
| $\theta \in [0, \pi]$ | The colatitute angle |
| $\phi \in [0, 2\pi]$ | The azimuth angle |
| $n \le 0$ | The (spherical harmonic) order |
| $m$ | The (spherical harmonic) degree |
| $P_n(x)$ | The Legendre polynomial of order $n$ for real valued arguments $x \in [-1, 1]$ |
| $P_n^m(x)$ | The associated Legendre function of order $n$ and degree $m$ for real valued arguments $x \in [-1, 1]$ |
| $\bar{Y}_n^m(\theta, \phi)$ | The complex valued spherical harmonics of order $n$ and degree $m$ for colatitude and azimuth angles $(\theta, \phi)$ |
| $Y_n^m(\theta, \phi)$ | The real valued spherical harmonics of order $n$ and degree $m$ for colatitude and azimuth angles $(\theta, \phi)$ |

# Associated Legendre Functions

```{python}
from matplotlib import pyplot as plt
import sympy as sym
from scipy.special import lpmv
import numpy as np
import spharpy

from scipy.special import sph_harm
import matplotlib as mpl
from matplotlib.colorbar import Colorbar


def plot_legendre_funcs(P_n_m_funcs, n_max=2, scipy=True, sharey=False, axis='off'):

    if type(P_n_m_funcs) is dict:
        P_n_m_funcs = [P_n_m_funcs]

    import warnings
    warnings.filterwarnings(
        "ignore", category=RuntimeWarning,
        message="divide by zero")
    warnings.filterwarnings(
        "ignore", category=RuntimeWarning,
        message="invalid value encountered")

    f, axs = plt.subplots(
        n_max+1, 2*n_max+1,
        figsize=(8, 4), sharex=True, sharey=sharey)

    for acn in range((n_max+1)**2):
        n, m = spharpy.spherical.acn2nm(acn)
        idx_m = (2*n_max + 1)//2 + m
        ax = axs[n, idx_m]

        ax.set_title('$P_{' + str(n) + '}^{' + str(m) + '}(x)$')
        for P_nm_func in P_n_m_funcs:
            func = P_nm_func[(n, m)]
            P_n_m_lambdified = sym.lambdify(
                (x), func, 'numpy', cse=True)

            ax.plot(
                xx,
                np.broadcast_to(np.asarray(P_n_m_lambdified(xx)), xx.shape),
                label=f'$P_{{{n}}}^{{{m}}}(x)$')

        if scipy is True:
            ax.plot(
                xx,
                lpmv(m, n, xx),
                label=f'$P_{{{n}}}^{{{m}}}(x)$ (SciPy)',
                linestyle=':', color='k')

    if scipy is True:
        handles, labels = ax.get_legend_handles_labels()
        axs[0, 0].legend(handles, ['Test', 'SciPy'])

    for ax in axs.flat:
        ax.axis(axis)

    for n in range(n_max+1):
        for m in range(n+1, n_max+1):
            ax = axs[n, m + (2*n_max+1)//2]
            ax.axis('off')
            ax = axs[n, -m + (2*n_max+1)//2]
            ax.axis('off')

    plt.tight_layout()
    return axs


def print_equation(expression, lhs=None, label=None):
    if label is not None:
        label_str = '{#' + f'{label}' + '}'
    else:
        label_str = ''

    if lhs is not None:
        lhs_string = f'{lhs} = '
    else:
        lhs_string = ''

    print(f'$${lhs_string}{sym.latex(expression)}.$$ {label_str}')

```

```{python}

x = sym.symbols('x', real=True)
n = sym.symbols('n', integer=True, real=True, positive=True)
m = sym.symbols('m', integer=True, real=True)

n_max = 4
xx = np.linspace(-1, 1, 1000)
```

## Williams (1999) and Rafaely (2019)

Eq. (6.27) in @Williams1999 Eq. (1.34) in @Rafaely2019 define the Legendre polynomials as.

$$
P_n(x) = \frac{1}{2^n\,n!}\frac{\mathrm{d}^n}{\mathrm{d}x^n}(x^2-1)^n.
$$ {#eq-legendre_poly_williams}

The respective sympy code is
```{python}
#| output: asis
def legendre_poly_williams(n, x):
    return 1 / (2**n * sym.factorial(n)) * sym.Derivative((x**2 - 1)**n, (x, n))

with sym.evaluate(False):
    P_n = legendre_poly_williams(n, x)

print_equation(P_n, 'P_n(x)', 'eq-legendre_poly_williams')

```
For the first four orders this results in the following expressions which coincide with Eq. (6.26) in @Williams1999
```{python}
#| output: asis
for nn in range(6):
    print_equation(P_n.subs(n, nn).doit().factor(x), f'P_{nn}(x)')
```

The associated Legendre functions in Eq. (6.29) in @Williams1999 and Eq. (1.30) in @Rafaely2019
for positive $m$ are defined as

$$
P_n^m(x) = (-1)^m \, (1-x^2)^{m/2} \, \frac{\mathrm{d}^m}{\mathrm{d}x^m}P_n(x)
$$ {#eq-legendre_func_williams}

Defined in sympy
```{python}
#|output: asis
def legendre_func_williams_pos_m(n, m, x):
    P_n = legendre_poly_williams(n, x)
    return (-1)**m * (1 - x**2)**(m/2) * sym.Derivative(P_n_symbol, (x, m))

P_n_symbol = sym.Function('P_n')(x)
P_nm_pos = (-1)**m * (1 - x**2)**(m/2) * sym.Derivative(P_n_symbol, (x, m))

# P_nm = legendre_func_williams_pos_m(n, m, x)
print_equation(P_nm_pos, 'P_n^m(x)', 'eq-legendre_func_williams')
```

For negative $m$, the following recurrence relation is used (see Eq. (6.31) in @Williams1999 and Eq. (1.31) in @Rafaely2019)

$$
P_n^{-m}(x) = (-1)^m \frac{(n-m)!}{(n+m)!} P_n^m(x)
$$ {#eq-legendre_recurrence_williams}

```{python}
#| output: asis
# def legendre_func_recurrence_neg_m(n, m, x):
    # return (-1)**m * sym.factorial(n-m)/sym.factorial(n+m) * legendre_func_williams_pos_m(n, m, x)
#  (-1)**m * sym.factorial(n-m)/sym.factorial(n+m) * legendre_func_williams_pos_m(n, m, x)

# P_n_neg_m = legendre_func_recurrence_neg_m(n, m, x)
P_nm_sym = sym.Function('P_n^m')(x)

# P_n_neg_m = (-1)**m * sym.factorial(n-m)/sym.factorial(n+m) * sym.Derivative(P_nm_sym, (x, m))
P_n_neg_m = (-1)**(-m) * sym.factorial(n+m)/sym.factorial(n-m) * legendre_func_williams_pos_m(n, -m, x)
# print_equation(P_n_neg_m)
P_n_neg_m

P_nm_pw = sym.Piecewise(
    (P_nm_pos, m>=0),
    (P_n_neg_m, m<0)
)
print_equation(P_nm_pw, 'P_n^m(x)', 'eq-legendre_func_williams')
```

or equivalently

```{python}
#| output: asis
print_equation(P_nm_pw.subs(P_n_symbol, P_n), 'P_n^m(x)', 'eq-legendre_func_williams_full')
```

Substituting $x = \sin\theta$ where $\theta$ is the co-latitude angle yields
```{python}
#| output: asis
#|
theta = sym.symbols(r'\theta', domain=sym.Interval(0, sym.pi), real=True, positive=True)

for nn in range(1, 4):
    mm = -1
    print_equation(P_nm_pw.subs(P_n_symbol, P_n).subs(x, sym.cos(theta)).subs(n, nn).subs(m, mm).doit().simplify(), 'P_{' + str(nn) +'}^{' + str(mm) + '}(x)')
```
which are in accordance with Chap. 5 in @Williams1999.

[Fig. @fig-legendre-williams-rafaely] shows a plot of the associated Legendre functions as defined in [Eq. @eq-legendre_func_williams_full] for the interval $x \in [-1, 1]$.

```{python}
#| fig-cap: The associated Legendre functions as defined in @eq-legendre_func_williams (see @Williams1999 and @Rafaely2019) for $x \in [-1, 1]$. Note that the definition coincides with the definition used in scipy.
#| label: fig-legendre-williams-rafaely

P_n_m_funcs = {}
for nn in range(n_max+1):
    for mm in range(-nn, nn+1):
        P_n_m_funcs[(nn, mm)] = P_nm_pw.subs(
            P_n_symbol, P_n).subs(n, nn).subs(m, mm).doit().simplify()

plot_legendre_funcs(P_n_m_funcs, n_max=n_max);
```

## Zotter and Frank (2019)

@Zotter2019

\begin{align}
    P_n^m(x) &= (-1)^m (1-x^2)^{m/2} \frac{\mathrm{d}^m}{\mathrm{d}x^m}P_n(x)\\
    P_n(x) &= \frac{(-1)^n}{2^n n!} \frac{\mathrm{d}^n}{\mathrm{d}x^n}(1-x^2)^n\\
\end{align}

or equivalently

\begin{equation}
    P_n^m(x) = \frac{(-1)^{(n+m)}}{2^n n!} (1-x^2)^{m/2} \frac{\mathrm{d}^{(n+m)}}{\mathrm{d}x^{(n+m)}}(1-x^2)^n
\end{equation}


```{python}
#| output: asis

P_n_zotter = (-1)**n / (2**n * sym.factorial(n)) * sym.Derivative((1 - x**2)**n, (x, n))

P_nm_zotter = (-1)**(n + m) / (2**n * sym.factorial(n)) * (1 - x**2)**(m/2) * sym.Derivative((1 - x**2)**n, (x, n + m))

print_equation(P_n_zotter, 'P_n(x)', label='eq-legendre-poly-zotter-frank')

print_equation(P_nm_zotter, 'P_n^m(x)', label='eq-legendre-func-zotter-frank')
```

Note that the multiplication with $(-1)^n$ in @eq-legendre-poly-zotter-frank changes the sign of $(x^2-1)^n = (-1)^n (1-x^2)^n$, which is used in @eq-legendre_func_williams_full. In contrast to @eq-legendre_func_williams_full, @eq-legendre-poly-zotter-frank does not require considering two cases, but is equally valid for positive and negative $m$.

Importantly, the definitions in @eq-legendre_func_williams_full and @eq-legendre-poly-zotter-frank are fully equivalent.
@fig-legendre-zotter-frank shows a plot of the associated Legendre functions as defined in @eq-legendre-poly-zotter-frank for the interval $x \in [-1, 1]$.

```{python}
#| fig-cap: The associated Legendre functions as defined in (see @Zotter2019)
#| label: fig-legendre-zotter-frank

P_n_m_funcs = {
    (nn, mm): P_nm_zotter.subs(n, nn).subs(m, mm).doit().simplify()
    for nn in range(n_max+1) for mm in range(-nn, nn + 1)}

plot_legendre_funcs(P_n_m_funcs, n_max=n_max);
```

## AES69-2022

The @AES69-2022 defines the associated Legendre functions as
```{python}
#| output: asis
P_nm_aes = 1 / (2**n * sym.factorial(n)) * (1 - x**2)**(m/2) * sym.Derivative((x**2 - 1)**n, (x, n + m))

print_equation(P_nm_aes, 'P_n^m(x)', label='eq-legendre-func-aes')

```
which omits the Condon-Shortley phase, i.e. $(-1)^m$, but is otherwise equivalent to @eq-legendre_func_williams_full and @eq-legendre-func-zotter-frank.
@fig-legendre-aes shows the associated Legendre functions as defined in @eq-legendre-poly-zotter-frank for the interval $x \in [-1, 1]$.
Omitting the Condon-Shortley phase results in a sign reversal for all functions of even degree $m$ visible in @fig-legendre-aes.

```{python}
#| fig-cap: The associated Legendre functions as defined in @AES69-2022.
#| label: fig-legendre-aes
P_n_m_funcs = {
    (n, m): 1 / (2**n * sym.factorial(n)) * (1 - x**2)**(m/2) * sym.diff((x**2 - 1)**n, x, n + m)
    for n in range(5) for m in range(-n, n + 1)}

plot_legendre_funcs(P_n_m_funcs, n_max=n_max);
```

## Normalization of the Associated Legendre Functions

### Positive and negative $m$

```{python}

theta, phi = sym.symbols(r'\theta \phi', real=True, positive=True)
n, m = sym.symbols('n m', integer=True)
```

```{python}

from sympy.functions.special.polynomials import assoc_legendre
P_nm_williams = assoc_legendre(n, m, x)

with sym.evaluate(False):
    N_nm_n3d_williams = sym.sqrt((2*n+1)/(4*sym.pi) * sym.factorial(n-m)/sym.factorial(n+m))
    N_nm_sn3d_williams = sym.sqrt(1/(4*sym.pi) * sym.factorial(n-m)/sym.factorial(n+m))
    N_nm_unit_williams = sym.sqrt(sym.factorial(n-m)/sym.factorial(n+m))

```


```{python}
#| output: asis
print_equation(N_nm_n3d_williams)
```


```{python}
#| output: asis
print_equation(N_nm_sn3d_williams)
```


```{python}
#| output: asis
print_equation(N_nm_unit_williams)
```

```{python}
P_nm_norm_n3d = {}
P_nm_norm_sn3d = {}
P_nm_norm_unit = {}
for nn in range(3+1):
    for mm in range(-nn, nn+1):
        # display((N_nm_williams * P_nm_williams).subs(n, nn).subs(m, mm).expand(func=True))
        P_nm_norm_n3d[(nn, mm)] = (N_nm_n3d_williams * P_nm_williams).subs(n, nn).subs(m, mm)
        P_nm_norm_sn3d[(nn, mm)] = (N_nm_sn3d_williams * P_nm_williams).subs(n, nn).subs(m, mm)
        P_nm_norm_unit[(nn, mm)] = (N_nm_unit_williams * P_nm_williams).subs(n, nn).subs(m, mm)


axs = plot_legendre_funcs([P_nm_norm_n3d, P_nm_norm_sn3d, P_nm_norm_unit], n_max=3, scipy=False, sharey=True, axis='on')
```

### Positive $|m|$ only
```{python}

P_nm_zotter = assoc_legendre(n, sym.Abs(m), x)
N_nm_zotter = sym.sqrt((2*n+1) * sym.factorial(n-sym.Abs(m))/sym.factorial(n+sym.Abs(m)))
# N_nm_williams = sym.sqrt(sym.factorial(n-m)/sym.factorial(n+m))

P_nm_norm = {}
for nn in range(3+1):
    for mm in range(-nn, nn+1):
        # display((N_nm_zotter * P_nm_zotter).subs(n, nn).subs(m, mm).expand(func=True))
        P_nm_norm[(nn, mm)] = (N_nm_zotter * P_nm_zotter).subs(n, nn).subs(m, mm)

```

```{python}
#| output: asis
print_equation(N_nm_zotter*P_nm_zotter)
```

```{python}
plot_legendre_funcs(P_nm_norm, n_max=3, scipy=False, sharey=True, axis='on');
```


